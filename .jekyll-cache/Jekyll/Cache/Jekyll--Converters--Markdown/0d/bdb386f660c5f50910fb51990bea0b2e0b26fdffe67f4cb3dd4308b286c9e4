I"®<p>For a long time, Golang provides an extremely simple dependency management model. It just depends on Git repos and actually its <code class="language-plaintext highlighter-rouge">master</code> branch.</p>

<p>If you have experience on concepts and tools like monorepo/Gerrit, you can easily get the point why it was initially designed like this<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote">1</a></sup> including the existence of <code class="language-plaintext highlighter-rouge">GOPATH</code>. That is because <strong>Google</strong> uses monorepo.</p>

<p>There are some advantages claimed<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote">2</a></sup> and Golang‚Äôs dependency management could work on that well.</p>

<p>However, monorepo does not dominate the world. The dominance of open source community is GitHub. In contrast, GitHub follows fork &amp; pull request workflow.</p>

<p>This (Go‚Äôs dependency management design) leads to lots of issues:</p>

<ul>
  <li>No tag, no semver. When <code class="language-plaintext highlighter-rouge">master</code> makes breaking change, it breaks build.</li>
  <li>Not compatible with GitHub‚Äôs fork model, unless you make some hack on Git remote<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote">3</a></sup>.</li>
</ul>

<p>To make it easier, there are some efforts:</p>

<ul>
  <li><a href="https://glide.sh/">Glide</a></li>
  <li><a href="http://labix.org/gopkg.in">Gopkg.in</a></li>
  <li><a href="https://github.com/kardianos/govendor">Govendor</a></li>
  <li><a href="https://github.com/golang/dep">Go Dep</a></li>
</ul>

<p>By these tools, we may handle vendors better. But these tools are not officialy supported and it needs commit all vendor packages to repository! Can you imagine a frontend or Node.js project commits its <code class="language-plaintext highlighter-rouge">node_modules</code>? This is ridiculous.</p>

<h2 id="go-module">Go Module</h2>

<p>I don‚Äôt know the decision process, but Golang team finally launched Go Module in 1.11, which embraces the non-monorepo part of the world.</p>

<ul>
  <li>No <code class="language-plaintext highlighter-rouge">GOPATH</code>, and now we can clone to anywhere.</li>
  <li><code class="language-plaintext highlighter-rouge">go get</code> inside a repo is not global, it works only at local.</li>
  <li>No <code class="language-plaintext highlighter-rouge">vendor</code></li>
  <li>Dependencies are defined in <code class="language-plaintext highlighter-rouge">go.mod</code> with git tags, commit hashes, and semver.</li>
</ul>

<h2 id="how-to">HOW TO</h2>

<ol>
  <li>Install or upgrade to Go &gt;=1.11 (currently 1.12)</li>
  <li>
    <p>Enable Go Module, edit <code class="language-plaintext highlighter-rouge">.bashrc</code> or <code class="language-plaintext highlighter-rouge">.zshrc</code>:</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">export </span><span class="nv">GO111MODULE</span><span class="o">=</span>on
</code></pre></div>    </div>
  </li>
  <li>
    <p>Initialize Go Module</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> go mod init <span class="nb">.</span>
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="commands">Commands</h2>

<ul>
  <li>Add missing and remove unused modules</li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go mod tidy
</code></pre></div></div>

<ul>
  <li>Add new module</li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go get github.com/crispgm/go-g
</code></pre></div></div>

<ul>
  <li>Update a module</li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go get <span class="nt">-u</span> github.com/crispgm/go-g
</code></pre></div></div>

<ul>
  <li>Update all modules</li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go get <span class="nt">-u</span>
</code></pre></div></div>

<ul>
  <li>Get specific version of module</li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go get github.com/crispgm/go-g@master
go get github.com/crispgm/go-g@1.0.0
go get github.com/crispgm/go-g@617f32e
</code></pre></div></div>

<ul>
  <li>Make vendored copy of dependencies</li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go mod vendor
</code></pre></div></div>

<p>I highly <strong>not</strong> recommend this, since getting rid of vendor is one of the major advantages of Go Module.</p>

<h2 id="editors-support">Editor‚Äôs Support</h2>

<h3 id="vscode">VSCode</h3>

<p>There is a <a href="https://github.com/Microsoft/vscode-go/wiki/Go-modules-support-in-Visual-Studio-Code">Go modules support</a> guide in <a href="https://github.com/microsoft/vscode-go">vscode-go</a> plugin. It is actually very easy that we just need to enable Language Server for go by adding one line to <code class="language-plaintext highlighter-rouge">settings.json</code>:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"go.useLanguageServer"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></code></pre></div></div>

<h2 id="troubles-encountered">Troubles Encountered</h2>

<ul>
  <li>‚ÄúDependency‚Äôs Dependency‚Äù</li>
</ul>

<p>One of our in-house library depends on <a href="https://github.com/satori/go.uuid">satori/go.uuid</a>, with traditional <code class="language-plaintext highlighter-rouge">go get</code> it means depend on <code class="language-plaintext highlighter-rouge">master</code>. But Go Module got the latest tag by default. So the solution should be:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go get <span class="nt">-u</span> github.com/satori/go.uuid@master
</code></pre></div></div>

<ul>
  <li>Got ‚Äúambiguous import: found github.com/ugorji/go/codec in multiple modules‚Äù</li>
</ul>

<p>It is actually caused by <a href="https://github.com/gin-gonic/gin">gin-gonic/gin</a> (the web framework we use) and there is a <a href="https://github.com/gin-gonic/gin/issues/1673">solution</a>:</p>

<p>Add the following to <code class="language-plaintext highlighter-rouge">go.mod</code> to solve the trouble.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>replace github.com/ugorji/go v1.1.4 <span class="o">=&gt;</span> github.com/ugorji/go/codec v0.0.0-20190204201341-e444a5086c43
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>Go Module is not a silver bullet, and it is more a compatibility than a fix. But for me, it is great improvement.</p>

<hr />

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="http://benjvi.com/2016/07/05/Dependency-Management-In-Golang">http://benjvi.com/2016/07/05/Dependency-Management-In-Golang</a>¬†<a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p><a href="https://en.wikipedia.org/wiki/Monorepo">https://en.wikipedia.org/wiki/Monorepo</a>¬†<a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p><a href="https://dev.to/loderunner/working-with-forks-in-go-3ab6">https://dev.to/loderunner/working-with-forks-in-go-3ab6</a>¬†<a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET